@import url('https://fonts.googleapis.com/css2?family=B612:wght@400;700&display=swap');

$black: #111111;
$white: #ece8e1;
$white-text: #F9F9F9;
$red: #FF4655;
$textColor: #0f1923;

body {
    font-size: 14px !important;
    font-family: 'B612', sans-serif !important;
    background-color: $white !important;
}


h1 {
    font-size: 2em;
}

h2 {
    font-size: 1.6em;
}

h3 {
    font-size: 1.3em;
}

p,
span,
div,
a,
button {
    font-size: 1em !important;
}

.navbar {
    background-color: $black;
    height: 80px;
    border-bottom-right-radius: 2px;
    border-bottom-left-radius: 2px;
}

.section:after {
    left: 5%;
    border-left: 1px solid rgba(9, 9, 9, .4);
    border-left-width: 1px;
    border-left-style: solid;
    border-left-color: rgba(9, 9, 9, 0.4);
}

button {
    font-size: 13px !important;
}

.profile {
    span {
        padding-right: 10px;
        font-size: 13px !important;
        font-weight: 600;
    }
}

@keyframes animate {
    from {
        bottom: -150px;
    }

    to {
        bottom: 0px;
    }
}

div.megaheaderh1 {
    position: relative;
    height: 200px;
    width: 100%;
    overflow: hidden;

    .h1-megaheader {
        font-size: 6em;
        font-weight: 700;
        position: absolute;
        z-index: 2;
        left: 10%;
        color: $textColor;
        position: absolute;
        font-weight: 700;
        transition: 0.3s ease;
        bottom: 0px;
        animation: animate 0.7s ease-in-out;
        animation-direction: alternate;
        letter-spacing: -3px;
    }

    .h1-megaheader-outlined {
        color: $white;
        text-shadow: -1px -1px 0 rgba(0, 0, 0, 0.05), 1px -1px 0 rgba(0, 0, 0, 0.05), -1px 1px 0 rgba(0, 0, 0, 0.05), 1px 1px 0 rgba(0, 0, 0, 0.05);
        position: absolute;
        font-weight: 700;
        font-size: 8em;
        white-space: pre;
    }
}

.logo {
    width: 50px;
}

@mixin glitchCopy {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0 !important;
    width: 100%;
    height: 100%;
    white-space: pre;
}

.navbar-dark .navbar-nav .nav-link,
.profil,
button {
    color: $white-text !important;
}

.glitch {
    position: relative;
    color: white;
    font-size: 4em;
    /* Animation provies a slight random skew. Check bottom of doc
for more information on how to random skew. */
    animation: glitch-skew 2s infinite linear alternate-reverse;

    // Creates a copy before our text. 
    &::before {
        // Duplicates our text with the mixin.
        @include glitchCopy;
        // Scoots text slightly to the left for the color offset.
        left: 2px;
        // Creates the color 'shadow' that happens on the glitch.
        text-shadow: -2px 0 #ff00c1;
        /* Creates an initial clip for our glitch. This works in
    a typical top,right,bottom,left fashion and creates a mask
    to only show a certain part of the glitch at a time. */
        clip: rect(44px, 450px, 56px, 0);
        /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
    with an alternating animation to keep things fresh. */
        animation: glitch-anim 12s infinite linear alternate-reverse;
    }

    // Creates a copy after our text. Note comments from ::before.
    &::after {
        @include glitchCopy;
        left: -2px;
        text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
        animation: glitch-anim2 1s infinite linear alternate-reverse;
    }
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
    $steps: 20;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
    $steps: 20;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
    $steps: 10;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            transform: skew((random(10) - 5) + deg);
        }
    }
}

.nav-item {
    a {
        color: $white-text;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .dropdown-toggle {
        a {
            color: $black !important;
        }
    }

    padding-left:30px;
    font-size: 0.8em;
    color: $white-text !important;
    opacity: 1;
}

button {
    border-radius: 0px !important;
    font-weight: 700 !important;
}

.btn-danger {
    background-color: $red !important;
}

@import "./partials/hamburger";